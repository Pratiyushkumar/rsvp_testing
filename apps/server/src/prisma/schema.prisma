generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id                          String     @id @default(uuid())
  primary_email               String     @unique @db.VarChar(256)
  secondary_email             String?    @db.VarChar(256)
  contact                     String?    @db.VarChar(20)
  full_name                   String?    @db.VarChar(256)
  username                    String?    @unique @db.VarChar(256)
  magicToken                  String?    @unique @db.VarChar(256)
  refreshToken                String?    @unique @db.VarChar(256)
  is_completed                Boolean    @default(false)
  location                    String?    @db.VarChar(256)
  bio                         String?    @db.VarChar(512)
  twitter                     String?    @db.VarChar(256)
  instagram                   String?    @db.VarChar(256)
  website                     String?    @db.VarChar(256)
  profile_icon                String?    @db.VarChar(256)@default("1")
  event_participation_enabled Boolean    @default(false)
  created_at                  DateTime   @default(now())
  updated_at                  DateTime   @default(now()) @updatedAt
  Event                       Event[]
  Attendee                    Attendee[]
  Cohost                      Cohost[]
  Update                      Update[]

  @@map("users")
}

model Update {
  id                        String    @id @default(uuid()) @db.VarChar(36)
  userId                    String    @map("user_id")
  eventId                   String    @map("event_id") @db.VarChar(36)
  content                   String    @db.VarChar(512)
  createdAt                 DateTime? @default(now()) @map("created_at")
  updatedAt                 DateTime? @updatedAt @map("updated_at")
  isNotification            Boolean   @map("is_notification")
  scheduledNotificationTime DateTime? @map("scheduled_notification_time")
  event                     Event     @relation("EventUpdates", fields: [eventId], references: [id], onDelete: Cascade)
  user                      Users     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("updates")
}

enum VenueType {
  physical
  virtual
  later
}

enum Status {
  Going    @map("1")
  NotGoing @map("2")
  Waiting  @map("3")
  Pending  @map("4")
  Invited  @map("5")
}

enum Role {
  Creator   @map("1")
  Manager   @map("2")
  ReadOnly  @map("3")
  Celebrity @map("4")
}

model Event {
  id                     String     @id @default(uuid()) @db.VarChar(36)
  creatorId              String     @map("creator_id")
  name                   String     @db.VarChar(256)
  slug                   String     @unique @db.VarChar(256)
  category               String?    @db.VarChar(256)
  startTime              DateTime   @map("start_time")
  endTime                DateTime   @map("end_time")
  eventDate              DateTime   @map("event_date")
  description            String?    @db.VarChar(512)
  eventImageId           String?    @map("event_image_id") @db.VarChar(256)
  venueType              VenueType  @map("venue_type")
  venueAddress           String?    @map("venue_address") @db.VarChar(256)
  venueUrl               String?    @map("venue_url") @db.VarChar(256)
  hostPermissionRequired Boolean    @map("host_permission_required")
  capacity               Int?
  isActive               Boolean    @default(true)
  isCancelled            Boolean    @default(false) @map("is_cancelled")
  isDeleted              Boolean    @default(false) @map("is_deleted")
  createdAt              DateTime   @default(now()) @map("created_at")
  updatedAt              DateTime   @updatedAt @map("updated_at")
  creator                Users      @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  updates                Update[]   @relation("EventUpdates")
  Attendee               Attendee[] @relation("EventAttendees")
  Cohost                 Cohost[]   @relation("EventCohosts")

  @@map("events")
}

model Attendee {
  id               String    @id @default(uuid()) @db.VarChar(36)
  userId           String    @map("user_id")
  eventId          String    @map("event_id") @db.VarChar(36)
  registrationTime DateTime  @default(now()) @map("registration_time")
  hasAttended      Boolean   @default(false) @map("has_attended")
  checkInTime      DateTime? @map("check_in_time")
  feedback         String?   @db.VarChar(512)
  qrToken          String    @unique @db.VarChar(512)
  status           Status    @default(Waiting)
  allowedStatus    Boolean   @default(true)
  deleted          Boolean   @default(false) @map("deleted")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  user             Users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event            Event     @relation("EventAttendees", fields: [eventId], references: [id], onDelete: Cascade)

  @@map("attendees")
}

model Cohost {
  id      String @id @default(uuid()) @db.VarChar(36)
  userId  String @map("user_id")
  eventId String @map("event_id") @db.VarChar(36)
  role    Role   @default(ReadOnly)
  user    Users  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event   Event  @relation("EventCohosts", fields: [eventId], references: [id], onDelete: Cascade)

  @@map("cohosts")
}
